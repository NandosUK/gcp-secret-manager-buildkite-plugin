#!/bin/bash

set -euo pipefail

env | grep BUILDKITE_PLUGIN_GCP_SECRET_MANAGER


echo "--- :gcp::key: Reading secrets from GCP Secret Manager"

load_secret_into_env() {
  local export_name="$1"
  local secret_id="$2"
  local secret_value

  echo "Reading ${secret_id} from GCP Secret Manager into environment variable ${export_name}"

  secret_value="$(get_secret_value "${secret_id}")"

  export "${export_name}=${secret_value}"
}

function get_secret_value() {
  local secret_id="$1"

  # Extract the secret value
  # the secret is declared local before using it, per http://mywiki.wooledge.org/BashPitfalls#local_varname.3D.24.28command.29
  local secrets;

  echo -e "\033[31m" >&2

  secrets=$(echo "${secret_id}")
  local result=$?

  echo -e "\033[0m" >&2

  if [[ $result -ne 0 ]]; then
    exit 1
  fi

  echo "${secrets}"
}

function strip_quotes() {
  echo "${1}" | sed "s/^[[:blank:]]*//g;s/[[:blank:]]*$//g;s/[\"']//g"
}

# parse env items
while IFS='=' read -r name _ ; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_ENV_) ]] ; then
    # Handle plain key=value, e.g
    # env:
    #   KEY_NAME: 'secret-id'

    export_name=$(echo "${name}" | sed 's/^BUILDKITE_PLUGIN_GCP_SECRET_MANAGER_ENV_//')
    secret_id="$(strip_quotes "${!name}")"

    load_secret_into_env "${export_name}" "${secret_id}"
  fi
done < <(env | sort)